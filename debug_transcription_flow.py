#!/usr/bin/env python3
"""
üîç DEBUG DO FLUXO DE TRANSCRI√á√ÉO
Identifica por que a diariza√ß√£o n√£o est√° sendo executada
"""

import asyncio
import numpy as np
from pathlib import Path

async def debug_transcription_flow():
    print("üîç DEBUG DO FLUXO DE TRANSCRI√á√ÉO")
    print("=" * 60)
    
    try:
        # 1. Verificar configura√ß√µes
        from app.core.config import settings
        print(f"‚úÖ CONFIGURA√á√ïES:")
        print(f"   - ENABLE_SPEAKER_DIARIZATION: {settings.ENABLE_SPEAKER_DIARIZATION}")
        print(f"   - HUGGINGFACE_TOKEN: {'‚úÖ Configurado' if settings.HUGGINGFACE_TOKEN else '‚ùå N√£o configurado'}")
        print(f"   - TRANSCRIPTION_MODEL: {settings.TRANSCRIPTION_MODEL}")
        
        # 2. Verificar disponibilidade dos servi√ßos
        from app.services.transcription_service import TranscriptionService, ENHANCED_TRANSCRIPTION_AVAILABLE
        print(f"\n‚úÖ SERVI√áOS:")
        print(f"   - ENHANCED_TRANSCRIPTION_AVAILABLE: {ENHANCED_TRANSCRIPTION_AVAILABLE}")
        
        # 3. Testar condi√ß√µes de hardware
        transcription_service = TranscriptionService()
        
        # Simular dura√ß√£o de √°udio t√≠pica
        test_durations = [30.0, 60.0, 120.0, 300.0]  # 30s, 1min, 2min, 5min
        
        for duration in test_durations:
            should_use_enhanced = transcription_service._should_use_enhanced_transcription(duration)
            print(f"   - Dura√ß√£o {duration}s ‚Üí Enhanced: {should_use_enhanced}")
        
        # 4. Verificar enhanced_transcription_service
        try:
            from app.services.enhanced_transcription_service import enhanced_transcription_service
            print(f"   - enhanced_transcription_service: ‚úÖ Dispon√≠vel")
            print(f"   - enable_diarization: {enhanced_transcription_service.enable_diarization}")
        except Exception as e:
            print(f"   - enhanced_transcription_service: ‚ùå {e}")
        
        # 5. Verificar speaker_diarization_service
        try:
            from app.services.speaker_diarization_service import speaker_diarization_service, PYANNOTE_AVAILABLE
            print(f"   - PYANNOTE_AVAILABLE: {PYANNOTE_AVAILABLE}")
            if PYANNOTE_AVAILABLE:
                # Testar carregamento do pipeline
                pipeline = speaker_diarization_service.pipeline
                print(f"   - Pipeline carregado: ‚úÖ")
            else:
                print(f"   - Pipeline: ‚ùå pyannote n√£o dispon√≠vel")
        except Exception as e:
            print(f"   - Pipeline: ‚ùå {e}")
        
        # 6. Simular √°udio de teste para verificar fluxo
        print(f"\nüß™ SIMULANDO PROCESSAMENTO:")
        
        # Criar √°udio fict√≠cio de 60 segundos
        sample_rate = 16000
        duration_seconds = 60.0
        audio_data = np.random.normal(0, 0.1, int(sample_rate * duration_seconds))
        
        print(f"   - √Åudio simulado: {duration_seconds}s, {sample_rate}Hz")
        
        # Verificar se enhanced transcription seria usado
        should_use = transcription_service._should_use_enhanced_transcription(duration_seconds)
        print(f"   - Usaria Enhanced Transcription: {should_use}")
        
        if should_use and ENHANCED_TRANSCRIPTION_AVAILABLE:
            print(f"   - ‚úÖ Diariza√ß√£o DEVERIA ser executada")
            
            # Testar enhanced transcription
            try:
                result = await enhanced_transcription_service.transcribe_with_speakers(
                    audio_data=audio_data,
                    sample_rate=sample_rate,
                    enable_diarization=True
                )
                print(f"   - ‚úÖ Enhanced transcription FUNCIONA")
                print(f"   - Speakers encontrados: {result.get('speakers_count', 0)}")
                print(f"   - M√©todo: {result.get('method', 'N/A')}")
            except Exception as e:
                print(f"   - ‚ùå Enhanced transcription FALHOU: {e}")
        else:
            print(f"   - ‚ùå Diariza√ß√£o N√ÉO seria executada")
            print(f"     Motivos:")
            print(f"     - should_use_enhanced: {should_use}")
            print(f"     - ENHANCED_TRANSCRIPTION_AVAILABLE: {ENHANCED_TRANSCRIPTION_AVAILABLE}")
        
        print(f"\nüéØ CONCLUS√ïES:")
        if should_use and ENHANCED_TRANSCRIPTION_AVAILABLE:
            print(f"   ‚úÖ Sistema configurado corretamente para diariza√ß√£o")
            print(f"   üí° Se n√£o est√° funcionando, problema pode estar em:")
            print(f"      1. Par√¢metro enable_diarization=False no endpoint")
            print(f"      2. Fallback silencioso para transcri√ß√£o simples")
            print(f"      3. Dura√ß√£o do √°udio < 30s")
        else:
            print(f"   ‚ùå Sistema N√ÉO configurado para diariza√ß√£o")
        
    except Exception as e:
        print(f"‚ùå ERRO GERAL: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_transcription_flow())
