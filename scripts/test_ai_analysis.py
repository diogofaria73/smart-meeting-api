#!/usr/bin/env python3
"""
üß™ Script de Teste da An√°lise de IA
Testa todas as funcionalidades do servi√ßo de an√°lise inteligente.
"""

import asyncio
import sys
import os
import logging
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Texto de exemplo para teste
SAMPLE_TEXT = """
Reuni√£o de planejamento do projeto Smart Meeting API realizada em 15/01/2024.

Participantes:
- Jo√£o Silva (Gerente de Projeto)
- Maria Santos (Desenvolvedora Backend)
- Pedro Oliveira (QA Engineer)
- Ana Costa (Product Owner)

Discuss√µes principais:

Jo√£o Silva iniciou a reuni√£o apresentando o cronograma. Maria Santos comentou sobre a implementa√ß√£o da API de transcri√ß√£o usando Whisper. Pedro Oliveira levantou preocupa√ß√µes sobre os testes de performance.

Ana Costa aprovou a proposta de usar modelos de IA para an√°lise autom√°tica. Jo√£o Silva ficou respons√°vel por definir os requirements t√©cnicos at√© sexta-feira.

Decis√µes tomadas:
- Aprovado uso de faster-whisper para otimiza√ß√£o
- Maria Santos vai implementar o servi√ßo de IA at√© o final da semana
- Pedro Oliveira criar√° os testes automatizados para valida√ß√£o
- Ana Costa validar√° os resultados com stakeholders

Pr√≥ximos passos:
- Implementar cache de modelos (Jo√£o Silva)
- Configurar pipeline de CI/CD (Maria Santos)
- Documentar APIs (Pedro Oliveira)
- Preparar demo para cliente (Ana Costa)

Sentimento geral: reuni√£o muito produtiva, equipe motivada e alinhada com objetivos.
"""

async def test_ai_analysis():
    """Testa o servi√ßo de an√°lise de IA"""
    try:
        # Importar o servi√ßo
        from app.services.meeting_analysis_service import meeting_analysis_service
        
        logger.info("ü§ñ Iniciando teste do servi√ßo de IA...")
        
        # Teste da an√°lise completa
        logger.info("üìù Testando an√°lise completa...")
        result = await meeting_analysis_service.analyze_meeting(SAMPLE_TEXT)
        
        # Validar resultados
        logger.info("üìä Resultados da an√°lise:")
        logger.info(f"   ‚Ä¢ Participantes encontrados: {len(result.participants)}")
        for p in result.participants:
            logger.info(f"     - {p.name} (confian√ßa: {p.confidence_score:.2f})")
        
        logger.info(f"   ‚Ä¢ T√≥picos principais: {len(result.main_topics)}")
        for t in result.main_topics:
            logger.info(f"     - {t.title} (relev√¢ncia: {t.relevance_score:.2f})")
        
        logger.info(f"   ‚Ä¢ Itens de a√ß√£o: {len(result.action_items)}")
        for a in result.action_items:
            logger.info(f"     - {a.description[:50]}... (confian√ßa: {a.confidence_score:.2f})")
            if a.responsible_person:
                logger.info(f"       Respons√°vel: {a.responsible_person}")
            if a.deadline:
                logger.info(f"       Prazo: {a.deadline}")
        
        logger.info(f"   ‚Ä¢ Decis√µes importantes: {len(result.key_decisions)}")
        for d in result.key_decisions:
            logger.info(f"     - {d.description[:50]}...")
        
        if result.sentiment_analysis:
            logger.info(f"   ‚Ä¢ Sentimento geral: {result.sentiment_analysis.overall_sentiment}")
            logger.info(f"     Confian√ßa: {result.sentiment_analysis.confidence_score:.2f}")
        
        logger.info(f"   ‚Ä¢ Resumo: {result.meeting_summary[:100]}...")
        logger.info(f"   ‚Ä¢ Confian√ßa geral: {result.confidence_score:.2f}")
        logger.info(f"   ‚Ä¢ Tempo de processamento: {result.processing_time_seconds:.2f}s")
        
        # Teste de performance
        logger.info("‚ö° Testando performance...")
        import time
        start_time = time.time()
        
        # An√°lise m√∫ltipla para testar cache
        for i in range(3):
            await meeting_analysis_service.analyze_meeting(SAMPLE_TEXT[:200])
        
        end_time = time.time()
        logger.info(f"   ‚Ä¢ 3 an√°lises sequenciais: {end_time - start_time:.2f}s")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Servi√ßo de IA n√£o dispon√≠vel: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste: {e}")
        return False

async def test_fallback_analysis():
    """Testa o servi√ßo tradicional como fallback"""
    try:
        from app.services.meeting_analysis_service import meeting_analysis_service
        
        logger.info("üîÑ Testando an√°lise tradicional (fallback)...")
        
        result = await meeting_analysis_service.analyze_meeting(
            transcription_text=SAMPLE_TEXT,
            include_sentiment=True,
            extract_participants=True,
            extract_action_items=True,
            min_confidence=0.6
        )
        
        logger.info("üìä Resultados da an√°lise tradicional:")
        logger.info(f"   ‚Ä¢ Participantes: {len(result.participants)}")
        logger.info(f"   ‚Ä¢ T√≥picos: {len(result.main_topics)}")
        logger.info(f"   ‚Ä¢ A√ß√µes: {len(result.action_items)}")
        logger.info(f"   ‚Ä¢ Decis√µes: {len(result.key_decisions)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste de fallback: {e}")
        return False

def test_model_imports():
    """Testa importa√ß√£o dos modelos"""
    logger.info("üì¶ Testando importa√ß√µes...")
    
    try:
        import spacy
        logger.info("‚úÖ spaCy importado com sucesso")
        
        try:
            nlp = spacy.load("pt_core_news_sm")
            logger.info("‚úÖ Modelo spaCy portugu√™s carregado")
        except OSError:
            logger.warning("‚ö†Ô∏è Modelo spaCy portugu√™s n√£o encontrado")
            try:
                nlp = spacy.load("en_core_web_sm")
                logger.info("‚úÖ Modelo spaCy ingl√™s carregado (fallback)")
            except OSError:
                logger.error("‚ùå Nenhum modelo spaCy dispon√≠vel")
        
    except ImportError:
        logger.error("‚ùå spaCy n√£o est√° instalado")
    
    try:
        from sentence_transformers import SentenceTransformer
        logger.info("‚úÖ SentenceTransformers importado")
        
        # Teste b√°sico de carregamento
        model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
        logger.info("‚úÖ Modelo de embeddings carregado")
        
    except ImportError:
        logger.error("‚ùå SentenceTransformers n√£o est√° instalado")
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar modelo de embeddings: {e}")
    
    try:
        from transformers import pipeline
        logger.info("‚úÖ Transformers importado")
        
    except ImportError:
        logger.error("‚ùå Transformers n√£o est√° instalado")
    
    try:
        from sklearn.feature_extraction.text import TfidfVectorizer
        logger.info("‚úÖ Scikit-learn importado")
        
    except ImportError:
        logger.error("‚ùå Scikit-learn n√£o est√° instalado")

async def main():
    """Fun√ß√£o principal de teste"""
    logger.info("üöÄ Iniciando bateria de testes da an√°lise de IA...")
    
    # 1. Testar importa√ß√µes
    test_model_imports()
    
    # 2. Testar an√°lise de IA
    ai_success = await test_ai_analysis()
    
    # 3. Testar fallback
    fallback_success = await test_fallback_analysis()
    
    # Relat√≥rio final
    logger.info("\nüìã RELAT√ìRIO FINAL:")
    if ai_success:
        logger.info("‚úÖ An√°lise de IA funcionando perfeitamente")
    else:
        logger.warning("‚ö†Ô∏è An√°lise de IA com problemas")
    
    if fallback_success:
        logger.info("‚úÖ An√°lise tradicional funcionando (boa cobertura)")
    else:
        logger.error("‚ùå An√°lise tradicional com problemas")
    
    if ai_success or fallback_success:
        logger.info("üéâ Sistema pronto para uso!")
        logger.info("üí° Dicas de uso:")
        logger.info("   ‚Ä¢ Para √°udios curtos (<60s), a IA ser√° mais r√°pida")
        logger.info("   ‚Ä¢ Para √°udios longos, monitore uso de mem√≥ria")
        logger.info("   ‚Ä¢ Cache de modelos melhora performance em an√°lises sequenciais")
    else:
        logger.error("‚ùå Sistema precisa de corre√ß√µes antes do uso")

if __name__ == "__main__":
    asyncio.run(main()) 