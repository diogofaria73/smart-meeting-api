#!/usr/bin/env python3
"""
üéôÔ∏è SCRIPT DE INSTALA√á√ÉO - SPEAKER DIARIZATION
Instala e configura as depend√™ncias necess√°rias para identifica√ß√£o de speakers
"""

import subprocess
import sys
import logging
import os
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def run_command(command: str, description: str) -> bool:
    """Executa um comando e retorna se foi bem-sucedido"""
    try:
        logger.info(f"üîÑ {description}")
        logger.info(f"   Comando: {command}")
        
        result = subprocess.run(
            command.split(),
            capture_output=True,
            text=True,
            check=True
        )
        
        logger.info(f"‚úÖ {description} - Conclu√≠do")
        if result.stdout:
            logger.debug(f"   Sa√≠da: {result.stdout[:200]}...")
        
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå {description} - Falhou")
        logger.error(f"   C√≥digo de erro: {e.returncode}")
        logger.error(f"   Stderr: {e.stderr}")
        return False
    except Exception as e:
        logger.error(f"‚ùå {description} - Erro inesperado: {e}")
        return False


def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    logger.info("üêç Verificando vers√£o do Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 10):
        logger.error(f"‚ùå Python {version.major}.{version.minor} n√£o √© suportado")
        logger.error("   Requisito: Python 3.10 ou superior")
        return False
    
    logger.info(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} √© compat√≠vel")
    return True


def check_poetry():
    """Verifica se Poetry est√° instalado"""
    logger.info("üì¶ Verificando Poetry...")
    
    try:
        result = subprocess.run(["poetry", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info(f"‚úÖ Poetry dispon√≠vel: {result.stdout.strip()}")
            return True
        else:
            logger.error("‚ùå Poetry n√£o encontrado")
            return False
    except FileNotFoundError:
        logger.error("‚ùå Poetry n√£o est√° instalado")
        logger.info("   Instale com: curl -sSL https://install.python-poetry.org | python3 -")
        return False


def install_dependencies():
    """Instala as depend√™ncias via Poetry"""
    logger.info("üì¶ Instalando depend√™ncias do projeto...")
    
    # Instala depend√™ncias principais
    if not run_command("poetry install", "Instalando depend√™ncias principais"):
        return False
    
    # Verifica se pyannote.audio foi instalado corretamente
    try:
        logger.info("üîç Verificando instala√ß√£o do pyannote.audio...")
        result = subprocess.run(
            ["poetry", "run", "python", "-c", "import pyannote.audio; print('‚úÖ pyannote.audio importado com sucesso')"],
            capture_output=True,
            text=True,
            check=True
        )
        logger.info(result.stdout.strip())
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error("‚ùå Erro ao verificar pyannote.audio")
        logger.error(f"   Stderr: {e.stderr}")
        return False


def create_env_template():
    """Cria template de vari√°veis de ambiente"""
    logger.info("üìù Criando template de configura√ß√£o...")
    
    env_template = """
# üéôÔ∏è CONFIGURA√á√ïES DE SPEAKER DIARIZATION

# Token do HuggingFace Hub (opcional, mas recomendado)
# Obtenha em: https://huggingface.co/settings/tokens
HUGGINGFACE_TOKEN=your_token_here

# Configura√ß√µes de diariza√ß√£o
ENABLE_SPEAKER_DIARIZATION=true
MIN_SPEAKERS=1
MAX_SPEAKERS=10
MIN_SEGMENT_DURATION=1.0

# Configura√ß√µes de hardware
# Deixe vazio para detec√ß√£o autom√°tica
FORCE_DEVICE=  # cuda, mps, ou cpu
FORCE_COMPUTE_TYPE=  # float16, float32, ou int8
"""
    
    env_file = Path(".env.diarization")
    
    try:
        with open(env_file, "w") as f:
            f.write(env_template.strip())
        
        logger.info(f"‚úÖ Template criado: {env_file}")
        logger.info("   Configure suas vari√°veis de ambiente neste arquivo")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar template: {e}")
        return False


def test_diarization():
    """Testa se a diariza√ß√£o est√° funcionando"""
    logger.info("üß™ Testando funcionalidade de diariza√ß√£o...")
    
    test_script = """
import sys
import warnings
warnings.filterwarnings('ignore')

try:
    from app.services.speaker_diarization_service import speaker_diarization_service
    info = speaker_diarization_service.get_performance_info()
    
    print('‚úÖ Servi√ßo de diariza√ß√£o carregado com sucesso')
    print(f'   - pyannote dispon√≠vel: {info["pyannote_available"]}')
    print(f'   - Device: {info["device"]}')
    print(f'   - Pipeline carregado: {info["pipeline_loaded"]}')
    
    if info["pyannote_available"]:
        print('üéâ Tudo pronto para identifica√ß√£o de speakers!')
    else:
        print('‚ö†Ô∏è pyannote.audio n√£o dispon√≠vel')
        sys.exit(1)
        
except Exception as e:
    print(f'‚ùå Erro no teste: {e}')
    sys.exit(1)
"""
    
    try:
        result = subprocess.run(
            ["poetry", "run", "python", "-c", test_script],
            capture_output=True,
            text=True,
            cwd=Path.cwd()
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Teste de diariza√ß√£o passou")
            for line in result.stdout.strip().split('\n'):
                logger.info(f"   {line}")
            return True
        else:
            logger.error("‚ùå Teste de diariza√ß√£o falhou")
            logger.error(f"   Stdout: {result.stdout}")
            logger.error(f"   Stderr: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar teste: {e}")
        return False


def print_next_steps():
    """Imprime pr√≥ximos passos"""
    logger.info("\n" + "="*60)
    logger.info("üéâ INSTALA√á√ÉO DA DIARIZA√á√ÉO CONCLU√çDA!")
    logger.info("="*60)
    
    logger.info("\nüìã PR√ìXIMOS PASSOS:")
    logger.info("   1. Configure seu token do HuggingFace (opcional):")
    logger.info("      - Acesse: https://huggingface.co/settings/tokens")
    logger.info("      - Aceite os termos: https://huggingface.co/pyannote/speaker-diarization-3.1")
    logger.info("      - Adicione o token no arquivo .env.diarization")
    
    logger.info("\n   2. Inicie a API:")
    logger.info("      poetry run python run.py")
    
    logger.info("\n   3. Teste a diariza√ß√£o:")
    logger.info("      - Endpoint: POST /api/transcriptions/test-diarization")
    logger.info("      - Envie um arquivo de √°udio com m√∫ltiplos speakers")
    logger.info("      - Verifique os speakers identificados na resposta")
    
    logger.info("\nüéôÔ∏è FUNCIONALIDADES DISPON√çVEIS:")
    logger.info("   ‚úÖ Identifica√ß√£o autom√°tica de speakers")
    logger.info("   ‚úÖ Segmenta√ß√£o temporal por speaker")
    logger.info("   ‚úÖ Estat√≠sticas de participa√ß√£o")
    logger.info("   ‚úÖ Integra√ß√£o com transcri√ß√£o Whisper")
    logger.info("   ‚úÖ Fallback para transcri√ß√£o simples")
    
    logger.info("\nüí° DICAS:")
    logger.info("   - √Åudios com >30s funcionam melhor para diariza√ß√£o")
    logger.info("   - GPU com 6GB+ recomendada para performance")
    logger.info("   - Suporte a formatos: MP3, WAV, M4A, FLAC, OGG")


def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    logger.info("üéôÔ∏è INSTALADOR DE SPEAKER DIARIZATION")
    logger.info("="*60)
    
    # Verifica√ß√µes b√°sicas
    if not check_python_version():
        sys.exit(1)
    
    if not check_poetry():
        sys.exit(1)
    
    # Instala√ß√£o
    if not install_dependencies():
        logger.error("‚ùå Falha na instala√ß√£o das depend√™ncias")
        sys.exit(1)
    
    # Configura√ß√£o
    create_env_template()
    
    # Teste
    if not test_diarization():
        logger.warning("‚ö†Ô∏è Teste inicial falhou, mas instala√ß√£o pode estar OK")
        logger.warning("   Verifique se h√° problemas de configura√ß√£o")
    
    # Conclus√£o
    print_next_steps()


if __name__ == "__main__":
    main() 