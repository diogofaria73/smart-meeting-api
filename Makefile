.PHONY: install run test format lint docker-up docker-down docker-build docker-run docker-all setup env-setup db-setup prisma-init prisma-generate prisma-migrate prisma-studio setup-first-time setup-env-files check-requirements

# Cores para output
BLUE := \033[34m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
BOLD := \033[1m
NC := \033[0m # No Color

# ==============================================
# COMANDOS DE SETUP INICIAL
# ==============================================

# Setup completo para primeira execu√ß√£o
setup-first-time: check-requirements setup-env-files docker-up wait-db install prisma-generate prisma-init setup-ai install-diarization-deps
	@echo ""
	@echo "$(GREEN)$(BOLD)üéâ SETUP INICIAL CONCLU√çDO COM SUCESSO! üéâ$(NC)"
	@echo "$(BLUE)================================================$(NC)"
	@echo "$(GREEN)‚úÖ Infraestrutura PostgreSQL configurada$(NC)"
	@echo "$(GREEN)‚úÖ Arquivos de configura√ß√£o (.env) criados$(NC)"
	@echo "$(GREEN)‚úÖ Depend√™ncias Python instaladas$(NC)"
	@echo "$(GREEN)‚úÖ Banco de dados inicializado$(NC)"
	@echo "$(GREEN)‚úÖ Modelos de IA configurados$(NC)"
	@echo "$(GREEN)‚úÖ Depend√™ncias de diariza√ß√£o instaladas$(NC)"
	@echo ""
	@echo "$(YELLOW)üöÄ Para iniciar a aplica√ß√£o:$(NC)"
	@echo "   make run"
	@echo ""
	@echo "$(YELLOW)üìä Para acessar o Prisma Studio:$(NC)"
	@echo "   make prisma-studio"
	@echo ""
	@echo "$(YELLOW)üß™ Para testar a IA:$(NC)"
	@echo "   make test-ai"

# Verifica se os requisitos est√£o instalados
check-requirements:
	@echo "$(BLUE)üîç Verificando requisitos do sistema...$(NC)"
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker n√£o encontrado. Instale o Docker primeiro.$(NC)"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker Compose n√£o encontrado.$(NC)"; exit 1; }
	@command -v poetry >/dev/null 2>&1 || { echo "$(RED)‚ùå Poetry n√£o encontrado. Instale com: curl -sSL https://install.python-poetry.org | python3 -$(NC)"; exit 1; }
	@python3 --version >/dev/null 2>&1 || { echo "$(RED)‚ùå Python 3 n√£o encontrado.$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ Todos os requisitos est√£o instalados$(NC)"

# Cria todos os arquivos de ambiente necess√°rios
setup-env-files:
	@echo "$(BLUE)üìù Criando arquivos de configura√ß√£o...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)Criando arquivo .env principal...$(NC)"; \
		echo '# ===========================================' > .env; \
		echo '# CONFIGURA√á√ïES SMART MEETING API' >> .env; \
		echo '# ===========================================' >> .env; \
		echo '' >> .env; \
		echo '# Configura√ß√µes gerais' >> .env; \
		echo 'PROJECT_NAME="Smart Meeting API"' >> .env; \
		echo 'API_PREFIX="/api"' >> .env; \
		echo 'SECRET_KEY="seu_secret_key_super_seguro_aqui_$(shell date +%s)"' >> .env; \
		echo 'DEBUG=true' >> .env; \
		echo '' >> .env; \
		echo '# Configura√ß√µes de CORS' >> .env; \
		echo 'ALLOWED_ORIGINS="http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000,http://127.0.0.1:8000"' >> .env; \
		echo '' >> .env; \
		echo '# Configura√ß√µes do banco de dados' >> .env; \
		echo 'DATABASE_URL="postgresql://postgres:postgres@localhost:5433/smart_meeting"' >> .env; \
		echo '' >> .env; \
		echo '# Configura√ß√µes para modelos de IA' >> .env; \
		echo 'MODEL_PATH="facebook/wav2vec2-large-960h"' >> .env; \
		echo 'SUMMARIZATION_MODEL="facebook/bart-large-cnn"' >> .env; \
		echo 'SPACY_MODEL="pt_core_news_sm"' >> .env; \
		echo '' >> .env; \
		echo '# Configura√ß√µes de upload' >> .env; \
		echo 'MAX_FILE_SIZE=100' >> .env; \
		echo 'UPLOAD_DIR="temp_audio"' >> .env; \
		echo '' >> .env; \
		echo '# Configura√ß√µes de WebSocket' >> .env; \
		echo 'WEBSOCKET_PING_INTERVAL=30' >> .env; \
		echo 'WEBSOCKET_PING_TIMEOUT=10' >> .env; \
		echo "$(GREEN)‚úÖ .env criado com sucesso!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è .env j√° existe. Mantendo configura√ß√µes atuais.$(NC)"; \
	fi
	@if [ ! -f .env.diarization ]; then \
		echo "$(YELLOW)Criando arquivo .env.diarization...$(NC)"; \
		echo '# ===========================================' > .env.diarization; \
		echo '# CONFIGURA√á√ïES DE SPEAKER DIARIZATION' >> .env.diarization; \
		echo '# ===========================================' >> .env.diarization; \
		echo '' >> .env.diarization; \
		echo '# Token do HuggingFace Hub (opcional, mas recomendado)' >> .env.diarization; \
		echo '# Obtenha em: https://huggingface.co/settings/tokens' >> .env.diarization; \
		echo 'HUGGINGFACE_TOKEN=your_token_here' >> .env.diarization; \
		echo '' >> .env.diarization; \
		echo '# Configura√ß√µes de diariza√ß√£o' >> .env.diarization; \
		echo 'ENABLE_SPEAKER_DIARIZATION=true' >> .env.diarization; \
		echo 'MIN_SPEAKERS=1' >> .env.diarization; \
		echo 'MAX_SPEAKERS=10' >> .env.diarization; \
		echo 'MIN_SEGMENT_DURATION=1.0' >> .env.diarization; \
		echo '' >> .env.diarization; \
		echo '# Configura√ß√µes de hardware' >> .env.diarization; \
		echo 'FORCE_DEVICE=  # cuda, mps, ou cpu' >> .env.diarization; \
		echo 'FORCE_COMPUTE_TYPE=  # float16, float32, ou int8' >> .env.diarization; \
		echo "$(GREEN)‚úÖ .env.diarization criado com sucesso!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è .env.diarization j√° existe. Mantendo configura√ß√µes atuais.$(NC)"; \
	fi

# Aguarda o banco de dados ficar pronto
wait-db:
	@echo "$(BLUE)‚è≥ Aguardando banco de dados PostgreSQL ficar pronto...$(NC)"
	@timeout=30; \
	while [ $$timeout -gt 0 ]; do \
		if docker exec smart-meeting-db pg_isready -U postgres >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ Banco de dados PostgreSQL est√° pronto!$(NC)"; \
			break; \
		fi; \
		echo "$(YELLOW)‚è≥ Aguardando... ($$timeout segundos restantes)$(NC)"; \
		sleep 2; \
		timeout=$$((timeout - 2)); \
	done; \
	if [ $$timeout -le 0 ]; then \
		echo "$(RED)‚ùå Timeout: Banco de dados n√£o ficou pronto em 30 segundos$(NC)"; \
		exit 1; \
	fi

# Instala depend√™ncias de diariza√ß√£o
install-diarization-deps:
	@echo "$(BLUE)üéôÔ∏è Instalando depend√™ncias de diariza√ß√£o...$(NC)"
	@poetry run python scripts/install_diarization.py

# ==============================================
# COMANDOS EXISTENTES (mantidos)
# ==============================================

# Instala√ß√£o de depend√™ncias
install:
	@echo "$(BLUE)üì¶ Instalando depend√™ncias Python...$(NC)"
	poetry install

# Execu√ß√£o da aplica√ß√£o
run:
	poetry run uvicorn app.main:app --reload

# Execu√ß√£o de testes
test:
	poetry run pytest

# Formata√ß√£o de c√≥digo
format:
	poetry run black .
	poetry run isort .

# Verifica√ß√£o de tipos
lint:
	poetry run mypy .

# Docker - Banco de dados
docker-up:
	@echo "$(BLUE)üê≥ Iniciando infraestrutura PostgreSQL...$(NC)"
	docker-compose up -d db
	@echo "$(GREEN)‚úÖ PostgreSQL iniciado em background$(NC)"

docker-down:
	@echo "$(BLUE)üõë Parando infraestrutura Docker...$(NC)"
	docker-compose down

# Docker - Aplica√ß√£o
docker-build:
	docker-compose build api

docker-run: docker-up
	docker-compose up api

docker-all: docker-up
	docker-compose up -d

# Prisma
prisma-init:
	@echo "$(BLUE)üóÑÔ∏è Inicializando esquema do banco de dados...$(NC)"
	poetry run prisma db push

prisma-generate:
	@echo "$(BLUE)‚öôÔ∏è Gerando cliente Prisma...$(NC)"
	poetry run prisma generate

prisma-migrate:
	poetry run prisma migrate dev

prisma-studio:
	poetry run prisma studio

# Setup inicial (vers√£o b√°sica - mantida para compatibilidade)
env-setup:
	@echo "Criando arquivo .env..."
	@if [ ! -f .env ]; then \
		echo '# Configura√ß√µes gerais\nPROJECT_NAME="Smart Meeting API"\nAPI_PREFIX="/api"\nSECRET_KEY="seu_secret_key_seguro_aqui"\n\n# Configura√ß√µes de CORS\nALLOWED_ORIGINS="http://localhost:3000,http://localhost:8000"\n\n# Configura√ß√µes do banco de dados\nDATABASE_URL="postgresql://postgres:postgres@localhost:5433/smart_meeting"\n\n# Configura√ß√µes para modelos de IA\nMODEL_PATH="facebook/wav2vec2-large-960h"\nSUMMARIZATION_MODEL="facebook/bart-large-cnn"' > .env; \
		echo ".env criado com sucesso!"; \
	else \
		echo ".env j√° existe. Pulando..."; \
	fi

db-setup: docker-up
	@echo "Aguardando o banco de dados iniciar..."
	@sleep 5
	@echo "Banco de dados pronto!"

# Configura√ß√£o de IA
setup-ai:
	@echo "$(BLUE)ü§ñ Configurando modelos de IA...$(NC)"
	poetry run python scripts/setup_ai_models.py

test-ai:
	@echo "$(BLUE)üß™ Testando an√°lise de IA...$(NC)"
	poetry run python scripts/test_ai_analysis.py

# Performance check
check-performance:
	@echo "‚ö° Verificando performance do sistema..."
	@echo "GPU dispon√≠vel:" && python -c "import torch; print('‚úÖ Sim' if torch.cuda.is_available() else '‚ùå N√£o')"
	@echo "Mem√≥ria RAM:" && python -c "import psutil; print(f'{psutil.virtual_memory().total / 1024**3:.1f}GB')"
	@echo "CPU cores:" && python -c "import os; print(os.cpu_count())"

setup: install env-setup db-setup prisma-generate prisma-init
	@echo "Setup inicial conclu√≠do!"
	@echo "üöÄ Para configurar a IA, execute: make setup-ai"

# Setup completo com IA (vers√£o b√°sica - mantida para compatibilidade)
setup-full: setup setup-ai
	@echo "üéâ Setup completo com IA finalizado!"

# ==============================================
# COMANDOS DE AJUDA
# ==============================================

help:
	@echo "$(BOLD)Smart Meeting API - Comandos Make$(NC)"
	@echo ""
	@echo "$(YELLOW)SETUP INICIAL (primeira vez):$(NC)"
	@echo "  setup-first-time     - Setup completo para primeira execu√ß√£o"
	@echo ""
	@echo "$(YELLOW)DESENVOLVIMENTO:$(NC)"
	@echo "  run                  - Executa a aplica√ß√£o"
	@echo "  test                 - Executa testes"
	@echo "  format               - Formata c√≥digo"
	@echo "  lint                 - Verifica tipos"
	@echo ""
	@echo "$(YELLOW)DOCKER:$(NC)"
	@echo "  docker-up            - Inicia PostgreSQL"
	@echo "  docker-down          - Para Docker"
	@echo ""
	@echo "$(YELLOW)BANCO DE DADOS:$(NC)"
	@echo "  prisma-studio        - Interface gr√°fica do banco"
	@echo "  prisma-migrate       - Cria nova migration"
	@echo ""
	@echo "$(YELLOW)IA:$(NC)"
	@echo "  setup-ai             - Configura modelos de IA"
	@echo "  test-ai              - Testa an√°lise de IA" 