from datetime import datetime
from typing import List, Optional, Dict, Any
from enum import Enum

from pydantic import BaseModel, Field


class Priority(str, Enum):
    ALTA = "alta"
    MEDIA = "m√©dia"
    BAIXA = "baixa"


class ActionItemStatus(str, Enum):
    PENDENTE = "pendente"
    EM_ANDAMENTO = "em_andamento"
    CONCLUIDA = "concluida"


class ActionItem(BaseModel):
    """Item de a√ß√£o/tarefa extra√≠do da reuni√£o"""
    task: str = Field(..., description="Descri√ß√£o da tarefa")
    assignee: Optional[str] = Field(None, description="Respons√°vel pela tarefa")
    due_date: Optional[str] = Field(None, description="Prazo mencionado")
    priority: Priority = Field(Priority.MEDIA, description="Prioridade da tarefa")
    confidence: float = Field(0.8, description="Confian√ßa na extra√ß√£o (0-1)")


class SpeakerSegment(BaseModel):
    """Segmento de fala com identifica√ß√£o de speaker"""
    start_time: float = Field(..., description="Tempo de in√≠cio em segundos")
    end_time: float = Field(..., description="Tempo de fim em segundos")
    speaker_id: str = Field(..., description="ID do speaker (e.g., 'SPEAKER_00')")
    text: str = Field(..., description="Texto transcrito do segmento")
    confidence: float = Field(0.8, description="Confian√ßa na identifica√ß√£o do speaker (0-1)")


class ParticipantInfo(BaseModel):
    """Informa√ß√µes de um participante"""
    name: str = Field(..., description="Nome do participante")
    speaker_id: Optional[str] = Field(None, description="ID do speaker identificado (e.g., 'SPEAKER_00')")
    mentions: int = Field(0, description="N√∫mero de vezes mencionado")
    speaking_time: float = Field(0.0, description="Tempo total de fala em segundos")
    segments_count: int = Field(0, description="N√∫mero de segmentos de fala")
    role: Optional[str] = Field(None, description="Fun√ß√£o/cargo identificado")
    confidence: float = Field(0.8, description="Confian√ßa na identifica√ß√£o (0-1)")


class TopicInfo(BaseModel):
    """Informa√ß√µes de um t√≥pico principal"""
    title: str = Field(..., description="T√≠tulo do t√≥pico")
    summary: str = Field(..., description="Resumo do t√≥pico")
    keywords: List[str] = Field(default_factory=list, description="Palavras-chave relacionadas")
    importance: float = Field(0.5, description="Import√¢ncia do t√≥pico (0-1)")
    duration_mentioned: Optional[str] = Field(None, description="Tempo aproximado discutido")


class KeyDecision(BaseModel):
    """Decis√£o importante tomada na reuni√£o"""
    decision: str = Field(..., description="Descri√ß√£o da decis√£o")
    context: str = Field(..., description="Contexto da decis√£o")
    impact: str = Field("m√©dia", description="Impacto estimado: alta, m√©dia, baixa")
    confidence: float = Field(0.8, description="Confian√ßa na extra√ß√£o (0-1)")


class SentimentAnalysis(BaseModel):
    """An√°lise de sentimento da reuni√£o"""
    overall: str = Field("neutro", description="Sentimento geral: positivo, neutro, negativo")
    topics: Dict[str, str] = Field(default_factory=dict, description="Sentimento por t√≥pico")
    confidence: float = Field(0.7, description="Confian√ßa na an√°lise (0-1)")


class MeetingAnalysisResult(BaseModel):
    """Resultado completo da an√°lise inteligente da reuni√£o"""
    participants: List[ParticipantInfo] = Field(default_factory=list, description="Participantes identificados")
    speaker_segments: List[SpeakerSegment] = Field(default_factory=list, description="Segmentos de fala por speaker")
    speakers_count: int = Field(0, description="N√∫mero total de speakers identificados")
    main_topics: List[TopicInfo] = Field(default_factory=list, description="T√≥picos principais")
    action_items: List[ActionItem] = Field(default_factory=list, description="Tarefas e a√ß√µes identificadas")
    key_decisions: List[KeyDecision] = Field(default_factory=list, description="Decis√µes importantes")
    summary: str = Field(..., description="Resumo geral estruturado")
    sentiment_analysis: Optional[SentimentAnalysis] = Field(None, description="An√°lise de sentimento")
    confidence_score: float = Field(0.8, description="Confian√ßa geral da an√°lise (0-1)")
    processing_time: Optional[float] = Field(None, description="Tempo de processamento em segundos")


class TranscriptionBase(BaseModel):
    meeting_id: int = Field(..., description="ID da reuni√£o associada")
    content: str = Field(..., description="Conte√∫do da transcri√ß√£o")


class TranscriptionCreate(TranscriptionBase):
    pass


class TranscriptionResponse(TranscriptionBase):
    id: int = Field(..., description="ID da transcri√ß√£o")
    created_at: datetime = Field(..., description="Data de cria√ß√£o da transcri√ß√£o")
    updated_at: datetime = Field(..., description="Data da √∫ltima atualiza√ß√£o da transcri√ß√£o")
    is_summarized: bool = Field(False, description="Indica se a transcri√ß√£o j√° foi resumida")
    is_analyzed: bool = Field(False, description="Indica se a transcri√ß√£o j√° foi analisada")
    summary: Optional[str] = Field(None, description="Resumo gerado a partir da transcri√ß√£o")
    topics: List[str] = Field(default_factory=list, description="T√≥picos principais identificados")
    analysis: Optional[MeetingAnalysisResult] = Field(None, description="An√°lise inteligente completa")
    
    # üéôÔ∏è NOVOS CAMPOS: Informa√ß√µes de diariza√ß√£o
    speakers_count: int = Field(0, description="N√∫mero total de speakers identificados")
    speaker_segments: List[SpeakerSegment] = Field(default_factory=list, description="Segmentos de fala por speaker")
    participants: List[ParticipantInfo] = Field(default_factory=list, description="Lista de participantes identificados")
    diarization_method: Optional[str] = Field(None, description="M√©todo usado para diariza√ß√£o")
    processing_details: Optional[Dict[str, Any]] = Field(None, description="Detalhes do processamento")

    class Config:
        from_attributes = True


class MeetingAnalysisResponse(BaseModel):
    """Resposta da API para an√°lise de reuni√£o"""
    id: int = Field(..., description="ID da an√°lise")
    meeting_id: int = Field(..., description="ID da reuni√£o")
    analysis: MeetingAnalysisResult = Field(..., description="Resultado da an√°lise")
    generated_at: datetime = Field(..., description="Data de gera√ß√£o da an√°lise")
    updated_at: datetime = Field(..., description="Data da √∫ltima atualiza√ß√£o")

    class Config:
        from_attributes = True


class AnalysisRequest(BaseModel):
    """Requisi√ß√£o para an√°lise de reuni√£o"""
    meeting_id: int = Field(..., description="ID da reuni√£o a ser analisada")
    include_sentiment: bool = Field(True, description="Incluir an√°lise de sentimento")
    extract_participants: bool = Field(True, description="Extrair participantes")
    extract_action_items: bool = Field(True, description="Extrair itens de a√ß√£o")
    min_confidence: float = Field(0.6, description="Confian√ßa m√≠nima para extra√ß√£o (0-1)") 