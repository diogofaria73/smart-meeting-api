import asyncio
from typing import Dict
from fastapi import APIRouter, Depends, File, HTTPException, UploadFile, status, BackgroundTasks, Query

from app.schemas.transcription import TranscriptionResponse
from app.services.transcription_service import TranscriptionService, transcription_service
from app.services.meeting_analysis_service import meeting_analysis_service
import logging

logger = logging.getLogger(__name__)

router = APIRouter()


@router.post("/transcribe", response_model=TranscriptionResponse)
async def transcribe_audio(
    meeting_id: int = Query(..., description="ID da reuni√£o"),
    file: UploadFile = File(..., description="Arquivo de √°udio para transcri√ß√£o")
):
    """
    Transcreve √°udio para texto usando Whisper otimizado para portugu√™s brasileiro.
    
    Funcionalidades:
    - üé§ Transcri√ß√£o autom√°tica de √°udio para texto
    - üáßüá∑ Otimizado para portugu√™s brasileiro
    - ‚ö° Configura√ß√µes adaptativas baseadas na dura√ß√£o do √°udio
    - üìù P√≥s-processamento de texto para melhor qualidade
    """
    try:
        logger.info(f"üé§ Iniciando transcri√ß√£o para reuni√£o {meeting_id}")
        logger.info(f"üìÅ Arquivo: {file.filename} ({file.content_type})")
        
        result = await transcription_service.transcribe_audio(meeting_id, file)
        
        logger.info(f"‚úÖ Transcri√ß√£o conclu√≠da para reuni√£o {meeting_id}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro na transcri√ß√£o: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@router.post("/summary/{meeting_id}", response_model=TranscriptionResponse)
async def generate_summary(meeting_id: int):
    """
    Gera resumo inteligente da transcri√ß√£o com an√°lise completa.
    
    Extrai automaticamente:
    - üë• Participantes da reuni√£o
    - üìã T√≥picos principais discutidos  
    - üìù Itens de a√ß√£o e tarefas
    - ‚öñÔ∏è Decis√µes importantes tomadas
    - üòä An√°lise de sentimento
    - üìÑ Resumo estruturado em portugu√™s brasileiro
    """
    try:
        logger.info(f"üìù Gerando resumo inteligente para reuni√£o {meeting_id}")
        
        result = await transcription_service.generate_summary(meeting_id)
        
        logger.info(f"‚úÖ Resumo inteligente gerado para reuni√£o {meeting_id}")
        return result
        
    except ValueError as e:
        logger.error(f"‚ùå Erro de valida√ß√£o: {str(e)}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar resumo: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@router.get("/{meeting_id}", response_model=TranscriptionResponse)
async def get_transcription(meeting_id: int):
    """
    Obt√©m a transcri√ß√£o e resumo de uma reuni√£o espec√≠fica.
    """
    try:
        from app.db.client import get_db
        
        async with get_db() as db:
            # Busca a transcri√ß√£o
            transcription = await db.transcription.find_first(
                where={"meeting_id": meeting_id}
            )
            
            if not transcription:
                raise HTTPException(
                    status_code=404, 
                    detail=f"Transcri√ß√£o n√£o encontrada para reuni√£o {meeting_id}"
                )
            
            # Busca o resumo se existir
            summary_record = await db.summary.find_first(
                where={"meeting_id": meeting_id}
            )
            
            # Busca a an√°lise se existir
            analysis_record = await db.meetinganalysis.find_first(
                where={"meeting_id": meeting_id}
            )
            
            # Prepara a resposta
            response_data = {
                "id": transcription.id,
                "meeting_id": transcription.meeting_id,
                "content": transcription.content,
                "created_at": transcription.created_at,
                "updated_at": transcription.updated_at,
                "is_summarized": transcription.is_summarized,
                "is_analyzed": getattr(transcription, 'is_analyzed', False)
            }
            
            # Adiciona resumo se existir
            if summary_record:
                response_data["summary"] = summary_record.content
                if summary_record.topics:
                    import json
                    try:
                        response_data["topics"] = json.loads(summary_record.topics)
                    except:
                        response_data["topics"] = []
            
            # Adiciona an√°lise se existir
            if analysis_record:
                import json
                try:
                    from app.schemas.transcription import MeetingAnalysisResult, ParticipantInfo, TopicInfo, ActionItem, KeyDecision, SentimentAnalysis
                    
                    # Reconstr√≥i a an√°lise
                    participants = [ParticipantInfo(**p) for p in json.loads(analysis_record.participants)]
                    main_topics = [TopicInfo(**t) for t in json.loads(analysis_record.main_topics)]
                    action_items = [ActionItem(**a) for a in json.loads(analysis_record.action_items)]
                    key_decisions = [KeyDecision(**d) for d in json.loads(analysis_record.key_decisions)]
                    
                    sentiment_analysis = None
                    if analysis_record.sentiment_analysis:
                        sentiment_data = json.loads(analysis_record.sentiment_analysis)
                        sentiment_analysis = SentimentAnalysis(**sentiment_data)
                    
                    analysis_result = MeetingAnalysisResult(
                        participants=participants,
                        main_topics=main_topics,
                        action_items=action_items,
                        key_decisions=key_decisions,
                        summary=analysis_record.summary,
                        sentiment_analysis=sentiment_analysis,
                        confidence_score=analysis_record.confidence_score
                    )
                    
                    response_data["analysis"] = analysis_result
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao carregar an√°lise: {e}")
            
            return TranscriptionResponse(**response_data)
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter transcri√ß√£o: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}") 